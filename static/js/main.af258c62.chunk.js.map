{"version":3,"sources":["api/users.ts","components/UserInfo/UserInfo.tsx","components/TodoInfo/TodoInfo.tsx","components/TodoList/TodoList.tsx","App.tsx","api/todos.ts","index.tsx"],"names":["id","name","username","email","UserInfo","user","className","href","TodoInfo","todo","title","completed","classNames","TodoList","todos","map","getUser","userId","usersFromServer","find","initialTodos","App","useState","titleEntered","setTitleEntered","userEntered","setUserEntered","setTodos","sort","todo1","todo2","newTodo","setNewTodo","action","method","onSubmit","event","preventDefault","type","placeholder","value","onChange","target","Number","disabled","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.af258c62.chunk.js","sourcesContent":["export default [\n  {\n    id: 1,\n    name: 'Leanne Graham',\n    username: 'Bret',\n    email: 'Sincere@april.biz',\n  },\n  {\n    id: 2,\n    name: 'Ervin Howell',\n    username: 'Antonette',\n    email: 'Shanna@melissa.tv',\n  },\n  {\n    id: 3,\n    name: 'Clementine Bauch',\n    username: 'Samantha',\n    email: 'Nathan@yesenia.net',\n  },\n  {\n    id: 4,\n    name: 'Patricia Lebsack',\n    username: 'Karianne',\n    email: 'Julianne.OConner@kory.org',\n  },\n  {\n    id: 5,\n    name: 'Chelsey Dietrich',\n    username: 'Kamren',\n    email: 'Lucio_Hettinger@annie.ca',\n  },\n  {\n    id: 6,\n    name: 'Mrs. Dennis Schulist',\n    username: 'Leopoldo_Corkery',\n    email: 'Karley_Dach@jasper.info',\n  },\n  {\n    id: 7,\n    name: 'Kurtis Weissnat',\n    username: 'Elwyn.Skiles',\n    email: 'Telly.Hoeger@billy.biz',\n  },\n  {\n    id: 8,\n    name: 'Nicholas Runolfsdottir V',\n    username: 'Maxime_Nienow',\n    email: 'Sherwood@rosamond.me',\n  },\n  {\n    id: 9,\n    name: 'Glenna Reichert',\n    username: 'Delphine',\n    email: 'Chaim_McDermott@dana.io',\n  },\n  {\n    id: 10,\n    name: 'Clementina DuBuque',\n    username: 'Moriah.Stanton',\n    email: 'Rey.Padberg@karina.biz',\n  },\n];\n","import React from 'react';\nimport { User } from '../../types/User';\n\ntype Props = {\n  user: User | null;\n};\n\nexport const UserInfo: React.FC<Props> = ({ user }) => (\n  <a className=\"UserInfo\" href={`mailto:${user?.email}`}>\n    {user?.name}\n  </a>\n);\n","import classNames from 'classnames';\nimport React from 'react';\nimport { Todo } from '../../types/Todo';\nimport { UserInfo } from '../UserInfo';\n\ntype Props = {\n  todo: Todo;\n};\n\nexport const TodoInfo: React.FC<Props> = ({ todo }) => {\n  const {\n    title, completed, user, id,\n  } = todo;\n\n  return (\n    <article\n      className={\n        classNames('TodoInfo', { 'TodoInfo--completed': completed })\n      }\n      data-id={id}\n    >\n      <h2 className=\"TodoInfo__title\">{title}</h2>\n\n      {user && (\n        <UserInfo user={user} />\n      )}\n\n    </article>\n  );\n};\n","import React from 'react';\nimport { Todo } from '../../types/Todo';\nimport { TodoInfo } from '../TodoInfo';\n\ntype Props = {\n  todos: Todo[];\n};\n\nexport const TodoList: React.FC<Props> = ({ todos }) => (\n  <section className=\"TodoList\">\n    {todos.map(todo => (\n      <TodoInfo todo={todo} key={todo.id} />\n    ))}\n  </section>\n);\n","import { useState } from 'react';\nimport './App.scss';\n\nimport usersFromServer from './api/users';\nimport todosFromServer from './api/todos';\nimport { User } from './types/User';\nimport { Todo } from './types/Todo';\nimport { TodoList } from './components/TodoList';\n\nfunction getUser(userId: number): User | null {\n  const foundUser = usersFromServer.find(user => user.id === userId);\n\n  return foundUser || null;\n}\n\nconst initialTodos: Todo[] = todosFromServer.map(todo => ({\n  ...todo,\n  user: getUser(todo.userId),\n}));\n\nexport const App = () => {\n  const [titleEntered, setTitleEntered] = useState(true);\n  const [userEntered, setUserEntered] = useState(true);\n  const [todos, setTodos] = useState([...initialTodos]);\n  const [newTodo, setNewTodo] = useState({\n    id: initialTodos.sort((todo1, todo2) => todo2.id - todo1.id)[0].id + 1,\n    title: '',\n    completed: false,\n    userId: 0,\n    user: getUser(0),\n  });\n\n  return (\n    <div className=\"App\">\n      <h1>Add todo form</h1>\n\n      <form\n        action=\"/api/users\"\n        method=\"POST\"\n        onSubmit={(event) => {\n          event.preventDefault();\n          if (newTodo.userId === 0) {\n            setUserEntered(false);\n          }\n\n          if (newTodo.title === '') {\n            setTitleEntered(false);\n          }\n\n          if (newTodo.title !== '' && newTodo.userId !== 0) {\n            setTodos([\n              ...todos,\n              newTodo,\n            ]);\n            setNewTodo({\n              id: initialTodos\n                .sort((todo1, todo2) => todo2.id - todo1.id)[0].id + 1,\n              title: '',\n              completed: false,\n              userId: 0,\n              user: getUser(0),\n            });\n          }\n        }}\n      >\n        <div className=\"field\">\n          <input\n            type=\"text\"\n            data-cy=\"titleInput\"\n            placeholder=\"Enter a title\"\n            value={newTodo.title}\n            onChange={(event) => {\n              setTitleEntered(true);\n              setNewTodo({\n                ...newTodo,\n                title: event.target.value,\n              });\n            }}\n          />\n          {titleEntered || (\n            <span className=\"error\">\n              Please enter a title\n            </span>\n          )}\n        </div>\n\n        <div className=\"field\">\n          <select\n            data-cy=\"userSelect\"\n            value={newTodo.userId}\n            onChange={(event) => {\n              setUserEntered(true);\n              setNewTodo({\n                ...newTodo,\n                userId: Number(event.target.value),\n                user: getUser(+event.target.value),\n              });\n            }}\n          >\n            <option value=\"0\" disabled>Choose a user</option>\n            {usersFromServer.map(user => (\n              <option value={user.id} key={user.id}>{user.name}</option>\n            ))}\n          </select>\n\n          {userEntered || (\n            <span className=\"error\">\n              Please choose a user\n            </span>\n          )}\n        </div>\n\n        <button type=\"submit\" data-cy=\"submitButton\">\n          Add\n        </button>\n      </form>\n\n      <TodoList todos={todos} />\n    </div>\n  );\n};\n","export default [\n  {\n    id: 1,\n    title: 'delectus aut autem',\n    completed: true,\n    userId: 1,\n  },\n  {\n    id: 15,\n    title: 'some other todo',\n    completed: false,\n    userId: 1,\n  },\n  {\n    id: 2,\n    title: 'quis ut nam facilis et officia qui',\n    completed: false,\n    userId: 4,\n  },\n];\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}